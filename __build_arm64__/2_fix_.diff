--- a/libevmasm/BlockDeduplicator.h
+++ b/libevmasm/BlockDeduplicator.h
@@ -65,7 +65,7 @@ class BlockDeduplicator
 	/// Iterator that skips tags and skips to the end if (all branches of) the control
 	/// flow does not continue to the next instruction.
 	/// If the arguments are supplied to the constructor, replaces items on the fly.
-	struct BlockIterator: std::iterator<std::forward_iterator_tag, AssemblyItem const>
+	struct BlockIterator //: std::iterator<std::forward_iterator_tag, AssemblyItem const>
 	{
 	public:
 		BlockIterator(
@@ -83,6 +83,12 @@ class BlockDeduplicator
 		AssemblyItems::const_iterator end;
 		AssemblyItem const* replaceItem;
 		AssemblyItem const* replaceWith;
+
+		typedef std::forward_iterator_tag iterator_category;
+		typedef std::ptrdiff_t difference_type;
+		typedef AssemblyItems& reference;
+		typedef AssemblyItems* pointer;
+		typedef AssemblyItem value_type;
 	};
 
 	std::map<u256, u256> m_replacedTags;
diff --git a/liblll/Parser.cpp b/liblll/Parser.cpp
index 3b68bc2daea8..e8508f1b4985 100644
--- a/liblll/Parser.cpp
+++ b/liblll/Parser.cpp
@@ -67,8 +67,12 @@ void dev::lll::debugOutAST(ostream& _out, sp::utree const& _this)
 
 		break;
 	case sp::utree_type::int_type: _out << _this.get<int>(); break;
-	case sp::utree_type::string_type: _out << "\"" << _this.get<sp::basic_string<boost::iterator_range<char const*>, sp::utree_type::string_type>>() << "\""; break;
-	case sp::utree_type::symbol_type: _out << _this.get<sp::basic_string<boost::iterator_range<char const*>, sp::utree_type::symbol_type>>(); break;
+	case sp::utree_type::string_type:
+		_out << "\"";
+		operator<<(_out, _this.get<sp::basic_string<boost::iterator_range<char const*>, sp::utree_type::string_type>>()) << "\""; break;
+	case sp::utree_type::symbol_type:
+		operator<<(_out, _this.get<sp::basic_string<boost::iterator_range<char const*>, sp::utree_type::symbol_type>>());
+		break;
 	case sp::utree_type::any_type: _out << *_this.get<bigint*>(); break;
 	default: _out << "nil";
 	}
